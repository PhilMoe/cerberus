' Cerberus X - Draw Primitives example using a tringle fan

Strict

Import mojo2

Class MyApp Extends App

	Field myCanvas:Canvas
	Field grabbed:Bool
	Field material:Material
	Field verts:Float[]
	Field vList:FloatList
	Field texcs:Float[]
	Field img:Image
	Field isVisualisationEnabled:Bool = True
	
	Method OnCreate:Int()

		'randomise
		Seed = Millisecs()
		myCanvas = New Canvas()
		
		'material = Material.Load("graphics.png", Image.Filter,  Shader.DefaultShader())
		img = Image.Load("graphics.png", 0.5, 0.5, Image.RepeatS)
		material = img.Material
		
		' provide 6 vertices from those coordinates as array, 1st one is the center of a tringle fan
		#Rem
		verts = [   0.0,   0.0, 
		         -150.0,-150.0,
		          150.0,-150.0,
		          150.0, 150.0,		          
				  0.0, 200.0,
		         -150.0, 150.0,
		         -150.0,-140.0]
		#End
		
		vList = New FloatList()
		' piece of texture to draw. Coordinates are float, ranging from 0 to 1.
		Local tx1:Float = -2
		Local ty1:Float = -2
		Local tx2:Float = 3
		Local ty2:Float = 3
		
		' provide texture coordinates for vertices
'		texcs = [0.5,0.5, 
'				 tx1,ty1, 
'				 tx2,ty1, 
'				 tx2,ty2,
'				 0.5,ty2*200.0/150.0,
'		         tx1,ty2,
'		         tx1,ty1]
		
		         
		Return 0		
	End
	
	Function DrawTriangleFan:Void(myCanvas:Canvas, verts:Float[], image:Image)
		Local mx:Float = MouseX()
		Local my:Float = MouseY()
		Local minX:Float = -150.0+mx, maxX:Float = 150.0+mx
		Local minY:Float = -150.0+my, maxY:Float = 150.0+my
	
		Local texcs:Float[verts.Length()]
		
		For Local i:Int=0 Until verts.Length() Step 2
			'Print verts[i]
			texcs[i]=(verts[i]-minX)/(maxX-minX)
			texcs[i+1]=(verts[i+1]-minY)/(maxY-minY)
			
			'Print texcs[i]
		Next 
				
		myCanvas.PushMatrix()
		'myCanvas.Translate(MouseX(), MouseY())
		myCanvas.SetColor(1, 1, 1) 
		myCanvas.DrawPrimitives(verts.Length()*0.5, 1, verts, texcs, image.Material)
			
		myCanvas.PopMatrix()

	
	End
	
	
	Function DrawVertexVisualisation:Void(myCanvas:Canvas, verts:Float[])
		'myCanvas.SetLineWidth(3.0)
		
		For Local i:Int=2 Until verts.Length() Step 2			
			myCanvas.SetColor(0,0.8,0)
			myCanvas.DrawLine(verts[i-2], verts[i-1],verts[i], verts[i+1])
			myCanvas.DrawLine(verts[0], verts[1],verts[i], verts[i+1])
			myCanvas.DrawCircle(verts[i], verts[i+1], 7.0)
		Next
		If verts.Length()>=2
			myCanvas.SetColor(0.8, 0, 0) 
			myCanvas.DrawCircle(verts[0], verts[1], 7.0)
		EndIf
	End
	
	
	Method OnRender:Int()
	
		myCanvas.Clear(.1, .1, .1)
		
		
		myCanvas.SetColor(0.8, 0, 0) 
		myCanvas.DrawText("Move the mouse", DeviceWidth()/2, DeviceHeight() - 26, 0.5)		
		If verts.Length()>=6
			DrawTriangleFan(myCanvas, verts, img)
		EndIf
		
		If isVisualisationEnabled DrawVertexVisualisation(myCanvas, verts)

		myCanvas.Flush()
		Return 0
	End
	
	
	Method OnUpdate:Int()
		If MouseHit(0)
			vList.AddLast(MouseX())
			vList.AddLast(MouseY())
			verts = vList.ToArray()
		EndIf
		
		If KeyHit(KEY_SPACE)
			isVisualisationEnabled = Not isVisualisationEnabled
		EndIf
		
		If KeyHit(KEY_ESCAPE)
			verts = []
			vList.Clear()
		EndIf
		
		Return 0
	End

End

Function Main:Int()
	New MyApp()
	Return 0
End