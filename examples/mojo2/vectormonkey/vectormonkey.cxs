' Cerberus X - Vector Monkey example
'
' Shows how to draw and manipulate vector graphics


Strict

Import mojo2


Class MyApp Extends App

	Field myCanvas:Canvas	
	Field drawing:List<TriPrims>
	Field rotstep:Float
	Field wiggle:Float
	Field rot:Float
 
 
	Method OnCreate:Int()
		myCanvas = New Canvas()
		drawing = MakeVectorDrawing()
		Return 0
	End
	
	
	Method OnUpdate:Int()
	
		If KeyHit(KEY_W) 
		 	wiggle = 0.5
		Endif
		 
		If MouseDown(MOUSE_LEFT)
		 	For Local pt:= Eachin drawing 		 
	 			pt.Pull(MouseX(), MouseY(), 0.0001) 		
	 		Next
		Endif
		 
		If MouseDown(MOUSE_RIGHT)
		 	For Local pt:= Eachin drawing 		 
	 			pt.Pull(MouseX(), MouseY(), -0.0001) 		
	 		Next
		Endif
	
		If KeyHit(KEY_SPACE)
			wiggle = 0
			rot = 0
			For Local pt:= Eachin drawing 		 
	 			pt.ResetMorph(1)	
	 		Next
			rotstep = 0
		Endif 
	
		Return 0
	End
	
	
	Method OnRender:Int()
	
		myCanvas.ResetMatrix()	
		myCanvas.Clear(0.5, 0.7, 1) 	
		myCanvas.SetColor(0, 0, 0)
		myCanvas.DrawText("Hold [LMB]/[RMB] to distort", DeviceWidth() / 2, DeviceHeight() - 60, 0.5)
		myCanvas.DrawText("Press [W] to wiggle", DeviceWidth() / 2, DeviceHeight() - 40, 0.5)
		myCanvas.DrawText("Press [Space] to reset", DeviceWidth() / 2, DeviceHeight() - 20, 0.5)
		 
		rot = 0
		 	
	 	For Local pt:= Eachin drawing
	 		myCanvas.Rotate(rot)
	 		pt.Draw(myCanvas)
	 		myCanvas.Rotate(-rot)
	 		rot +=rotstep	
	 	Next
	 	
		myCanvas.Flush()
		rotstep += Cos(Float(Millisecs() Mod 360)) * wiggle
	 
		wiggle *= 0.95
		rotstep *= 0.99
		
		For Local pt:= Eachin drawing 		 
	 		pt.ResetMorph(0.01)	
	 	Next
		
		Return 0
	End
End


Class TriPrims
	
	Field r:Float,g:Float,b:Float,a:Float = 1
	Field myVertices:Float[]
	Field morphedVertices:Float[]
	Field indexes:Int[]
	
	
	Method ResetMorph:Void(factor:Float = 1.0)
	
		If factor >= 1
			Local invfactor:Float = 1.0 - factor
			For Local i:Int = 0 Until myVertices.Length
				morphedVertices[i] =  myVertices[i]  
			Next
			Return
		Endif 
	End
	
	
	Method Draw:Void(myCanvas:Canvas)
		
		If morphedVertices.Length<>myVertices.Length
			morphedVertices = New  Float[myVertices.Length]
			ResetMorph()
	 	Endif	
		myCanvas.SetColor(r, g, b, a)
		myCanvas.DrawIndexedPrimitives(3, indexes.Length / 3, morphedVertices, indexes)
	End 
	
	
	Method Pull:Void(x:Float, y:Float, factor:Float)
		
		For Local i:Int = 0 Until myVertices.Length Step 2
		
			Local vx:Float = (morphedVertices[i] - x)
			Local vy:Float = (morphedVertices[i + 1] - y) 
			Local dist:Float = Sqrt(vx * vx + vy * vy)
		
	 		dist = 200 - dist

			Local newx:Float = morphedVertices[i] + vx * dist * factor 
			Local newy:Float = morphedVertices[i + 1] + vy * dist * factor 
 
			morphedVertices[i] = newx
			morphedVertices[i + 1] = newy
 
		Next
	End
End


Function MakeVectorDrawing:List<TriPrims>()

	Local data:=LoadString("data.txt")
	Local primslist:= New List<TriPrims>
	Local lines:String[] = data.Split("*")
	Local tp:TriPrims
	
	For Local line:String = Eachin lines
		
		Local parts:String[] = line.Split(";")
	
		Select parts[0]
		 
		 	Case "color"
				tp = New TriPrims
				
				Local vals:String[] = parts[1].Split(",")
				tp.r = Float(vals[0])
				tp.g = Float(vals[1])
				tp.b = Float(vals[2])
			 	primslist.AddLast(tp)
			 	
			 Case "vertices"	
			 	Local vals:String[] = parts[1].Split(",")
			 	
			 	tp.myVertices = New Float[vals.Length]
			 	For Local i:Int = 0  Until vals.Length
			 		tp.myVertices[i] = Float(vals[i]) * 0.01
			 	Next
			 							 
			 Case "indexes"				
				Local vals:String[] = parts[1].Split(",")
			 	tp.indexes = New Int[vals.Length]
			 	For Local i:Int = 0  Until vals.Length
			 		tp.indexes[i] = Int(vals[i])
			 	Next			
		 End		 
	Next
		 		 
	Return primslist
End


Function Main:Int()
	New MyApp
	Return 0
End