' Cerberus X - Letterbox example (GLFW)
'
' Demonstrates how to maintain aspect ratio, using letterboxing if necessary, when window size is changed

Strict

Import mojo2

' set the parameters for a GLFW window
#GLFW_WINDOW_WIDTH = 800
#GLFW_WINDOW_HEIGHT = 400
#GLFW_WINDOW_RESIZABLE = True
#GLFW_WINDOW_RENDER_WHILE_RESIZING = True

' the size and aspect ratio of our virtual window
Const VWIDTH:Int = 320
Const VHEIGHT:Int = 240
Const VASPECT:Float = VWIDTH/VHEIGHT



Class MyApp Extends App

	Field myCanvas:Canvas
	Field splitScreen:Bool
	
		
	Method OnCreate:Int()
		myCanvas = New Canvas()
		Return 0
	End
	
	
	Method OnUpdate:Int()	
		If KeyHit(KEY_SPACE) splitScreen = Not splitScreen
		Return 0
	End
	
	
	Method CalcLetterbox:String(devrect:Int[], vprect:Int[])
	
		' get the aspect ratio of the single or two player 'screens'
		' this will change if the window is re-sized so unlike our 'virtual screen', constants cannot be used
		Local daspect:Float = devrect[2] / devrect[3]
		Local feedback:String = ""
		
		If daspect > VASPECT
			feedback = "Too Wide! Using Horizontal Letterbox"
			vprect[2] = devrect[3] * VASPECT
			vprect[3] = devrect[3]
			vprect[0] = (devrect[2] - vprect[2]) / 2 + devrect[0]
			vprect[1] = devrect[1]
		Else
			feedback = "Too Tall! Using Vertical Letterbox"
			vprect[2] = devrect[2]
			vprect[3] = devrect[2] / VASPECT
			vprect[0] = devrect[0]
			vprect[1] = (devrect[3] - vprect[3]) / 2 + devrect[1]
		Endif
		
		Return feedback
	
	End
	

	Method RenderScene:Void(msg:String, devrect:Int[])	
		
		Local vprect:Int[4]
			
		' send the size of the single or each two player screen stored in devrect[] to the CalcLetterbox method
		' vprect is set in that method
		Local aspect:String = CalcLetterbox(devrect, vprect)

		' project our virtual screen onto the canvas
		myCanvas.SetViewport(vprect[0], vprect[1], vprect[2], vprect[3])
		myCanvas.SetProjection2d(0, VWIDTH, 0, VHEIGHT)
		myCanvas.Clear(0, 0, 1)
		myCanvas.DrawText(msg, VWIDTH/2, VHEIGHT/2, 0.5, 0.5)
		myCanvas.DrawText(aspect, VWIDTH/2, 8, 0.5)
	End
		
	
	Method OnRender:Int()
	
		' set viewport to fill the window
		myCanvas.SetViewport(0, 0, DeviceWidth(), DeviceHeight())
		myCanvas.Clear(0, 0, 0)
	
		If splitScreen
			' for a vertical splitscreen
			' get the height of each screen, ie half of the application window height
			Local h:Int = DeviceHeight() / 2
			' draw the two player screens
			RenderScene("PLAYER 1 READY", [0, 0, DeviceWidth(), h])
			RenderScene("PLAYER 2 READY", [0, h, DeviceWidth(), h])
		Else
			' draw single player screen
			RenderScene("SPACE TO TOGGLE SPLITSCREEN", [0, 0, DeviceWidth(), DeviceHeight()])
		Endif
		
		myCanvas.Flush()
		Return 0
	End
	
End


Function Main:Int()
	New MyApp
	Return 0
End
