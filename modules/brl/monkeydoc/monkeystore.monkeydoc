
# Module brl.monkeystore

# Interface IOnOpenStoreComplete

# Method OnOpenStoreComplete:Void( result:Int )

Called when the store has finished opening.

@result can be one of:

| Result	| Description
| -1		| Fatal error
| 0			| Success


# Interface IOnBuyProductComplete

# Method OnBuyProductComplete:Void( result:Int,product:Product )

Called when a [[MonkeyStore.BuyProductAsync]] operation completes.

@result will be one of:

| Result	| Description
| -1		| Fatal error
| 0			| Success
| 1			| Cancelled by user


# Interface IOnGetOwnedProductsComplete

# Method OnGetOwnedProductsComplete:Void( result:Int,products:Product[] )

Called when a [[MonkeyStore.GetOwnedProductsAsync]] operation completes.

@result will be one of:

| Result	| Description
| -1		| Fatal error
| 0			| Success
| 1			| Cancelled by user


# Class Product

# Method Title:String() Property

The product title.


# Method Identifier:String() Property

The iTunes connect or GooglePlay product identifier.


# Method Description:String() Property

The product description.


# Method Price:String() Property

The localized product price.


# Method Type:Int() Property

Product type, one of:

| Type	| Description
| 1		| Consumable product
| 2		| Non-consumable product


# Class MonkeyStore

The MonkeyStore class allows apps to perform 'in app purchases' (IAP).

The general process for using MonkeyStore in your apps is:

* Create a new MonkeyStore object inside your App's OnCreate method.

* Add products to the store using [[AddProducts]]. 

* Open the store using [[OpenStoreAsync]].

* Once the store is sucessfully open, buy products using [[BuyProductAsync]].

* You can also enquire about products once the store is open using [[GetProduct]] or [[GetProducts]].

* If you app detects it has been installed on a new device, you can use the [[GetOwnedProductsAsync]] method to determine which non-consumable products are already owned by the user. It is recommended that this method is only called in response to a user GUI interaction, as on iOS it may bring up a 'login' dialog. If this happens out of the blue, it will look justifiably suspicious!

Notes:

It is up to your app to keep track of purchased products. Using [[GetOwnedProductsAsync]] to do this is not recommended, as on iOS it requires the user to login to the app store each time it is called. Use of [[GetOwnedProductsAsync]] should be reserved for situations where your app detects it has been installed on a new device and the user chooses to 'Restore Purchases' via some GUI interaction.

MonkeyStore only currently supports consumable and non-consumables products. Subscriptions and downloadable content are not supported.


# Method AddProducts:Void( ids:String[],type:Int )

Adds multiple new products to the store.

Each element of @ids is the Android or iOS 'product id' of the product to add.

@type is the product type - consumable or non-consumable.

On iOS, you must ensure that @type matches the product type selected in iTunes Connect, otherwise the results will be unpredictable!

On Android, the product type selected in the GooglePlay Developer Console must be 'managed' (MonkeyStore emulates consumable products on Android).

This method may only be called before [[OpenStoreAsync]].

@type must be one of:

| Type	| Description
| 1		| Consumable product
| 2		| Non-consumable product


# Method OpenStoreAsync:Void( onComplete:IOnOpenStoreComplete )

Starts an async operation to open the store.

When the operation completes, the OnOpenStoreComplete method of the @onComplete object is called.


# Method BuyProductAsync:Void( product:Product,onComplete:IOnBuyProductComplete )

Starts an async operation to buy a product.

When the operation completes, the OnBuyProductComplete method of the @onComplete object is called.

Note that it is possible to buy the same non-consumable product multiple times, although the user will only be charged for the first purchase. It is up to your app to keep track of purchases and ensure the user is not presented with the option of repurchasing a non-consumable product.

This method may only be called after [[OpenStoreAsync]] successfully completes.


# Method GetOwnedProductsAsync:Void( onComplete:IOnGetOwnedProductsComplete )

Starts an async operation to get an array of all non-consumable products owned by the user.

When the operation completes, the OnGetOwnedProductsComplete method of the @onComplete object is called.

This method may only be called after [[OpenStoreAsync]] successfully completes.

On iOS, this method may cause a 'login' dialog to appear.


# Method GetProduct:Product( id:String )

Gets the product corresponding to @id, the iTunes connect or GooglePlay product identifier.

This method may only be called after [[OpenStoreAsync]] successfully completes.


# Method GetProducts:Product[]()

Gets all products.

This method may only be called after [[OpenStoreAsync]] successfully completes.


# Method GetProducts:Product[]( type:Int )

Gets all products of the given type.

This method may only be called after [[OpenStoreAsync]] successfully completes.

@type must be one of:

| Type	| Description
| 1		| Consumable product
| 2		| Non-consumable product
