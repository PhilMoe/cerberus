
' Module trans.toker
'
' Placed into the public domain 24/02/2011.
' No warranty implied; use at your own risk.

'##################################################################################
' This file scans the source file strings that are to be turned into parser tokens
'##################################################################################
' NOTE: All comments should be viewed as a work-in-progress and my not be an accurate description of
'		the internal workings of this file.

' TODO: Check comments for accuracy.

Import trans

'toke_type
Const TOKE_EOF=0
Const TOKE_SPACE=1
Const TOKE_IDENT=2
Const TOKE_KEYWORD=3
Const TOKE_INTLIT=4
Const TOKE_FLOATLIT=5
Const TOKE_STRINGLIT=6
Const TOKE_STRINGLITEX=7
Const TOKE_SYMBOL=8
Const TOKE_LINECOMMENT=9
Const TOKE_INTLITEX=10

Const REMARK_BLOCK=$01
Const CONBLOCK=$02

'***** Tokenizer *****
Class Toker

	Global _symbols:StringSet
	Global _keywords:StringSet
	Global _tokenFlags

	Field _path$
	Field _line
	Field _source$
	Field _length
	Field _toke$
	Field _tokeType
	Field _tokePos
	
	' Initialisation method to define the keywords and symbols to treat as command tokens
	Method _init()
	
		If _keywords Return
		
		Const keywords:="void strict "+
		"public private protected friend property "+
		"bool int float string array object mod continue exit "+
		"include includedir import module extern "+
		"new self super eachin true false null not "+
		"extends abstract final select case default "+
		"const local global field method function class "+
		"and or shl shr end if then else elseif endif while wend repeat until forever "+
		"for to step next return "+
		"interface implements inline alias try catch throw throwable "+
		"enumerate"

		_keywords=New StringSet
		For Local t:=Eachin keywords.Split( " " )
			_keywords.Insert t
		Next
		_symbols=New StringSet
		_symbols.Insert ".."
		_symbols.Insert ":="
		_symbols.Insert "*="
		_symbols.Insert "/="
		_symbols.Insert "+="
		_symbols.Insert "-="
		_symbols.Insert "|="
		_symbols.Insert "&="
		_symbols.Insert "~~="
	End
	
	' Two constructors. One requiring a path and a source file. The other just needs a valid token object.
	Method New( path$,source$ )
		_init
		_path=path
		_line=1
		_source=source
		_length=_source.Length
		_toke=""
		_tokeType=TOKE_EOF
		_tokePos=0
	End

	Method New( toker:Toker )
		_init
		_path=toker._path
		_line=toker._line
		_source=toker._source
		_length=_source.Length
		_toke=toker._toke
		_tokeType=toker._tokeType
		_tokePos=toker._tokePos
	End
	
	' Retrieve the file path or line that the tonkenizer is currently working with.
	Method Path$()
		Return _path
	End
	
	Method Line:Int()
		Return _line
	End
	
	' Process an character to determine what the toke will be.
	Method NextToke$()
	
		_toke=""

		' Check for end of source file and add a End-Of-File token
		If _tokePos=_length
		
			_tokeType=TOKE_EOF
			Return _toke
			
		Endif
		
		' Preload chr and str with the current character code and is string representation.
		Local chr:=TCHR()
		Local str:=TSTR()
		
		' Preserve the current character position before advancing by one.
		' This will be the start of a token that is to be parsed.
		Local start:=_tokePos
		_tokePos+=1
		
		' If the current character is a new line or empty string, then set the token type to a SYMBOL skip a line.
		If str="~n"
		
			_tokeType=TOKE_SYMBOL
			_line+=1
		
		' If the character is a white space character, then set the token type to SPACE and advance the token character count.
		Else If IsSpace( chr )
		
			_tokeType=TOKE_SPACE
			
			While _tokePos<_length And IsSpace( TCHR() ) And TSTR()<>"~n"
				_tokePos+=1
			Wend
			
		' If the character is the start of a line comment then process until the next new line character and set the token type to LINECOMMENT.	
		Else If str="'"
		
			_tokeType=TOKE_LINECOMMENT
			
			While _tokePos<_length And TSTR()<>"~n"
				_tokePos+=1
			Wend
			
			' If not at the end of the file, increase the line count and advance to the next character for the next token when the method is called again.
			If _tokePos<_length
				_tokePos+=1
				_line+=1
			Endif
		
		' If the character is an underscore or an alpha-beta, then the next token will be either an IDENT or KEYWORD token type.
		Else If str="_" Or IsAlpha( chr )
			_tokeType=TOKE_IDENT
			
			While _tokePos<_length
				Local chr=_source[_tokePos]
				If chr<>95 And Not IsAlpha( chr ) And Not IsDigit( chr ) Exit
				_tokePos+=1
			Wend
			
			_toke=_source[start.._tokePos]
			
			' If the result is one of the predefined keywords, then set the type accordingly.
			If _keywords.Contains( _toke.ToLower() ) _tokeType=TOKE_KEYWORD
		
		' If the next character is a digit or period, then the token will be integer or a floating point number.	
		Else If IsDigit( chr ) Or str="." And IsDigit( TCHR() )
		
			_tokeType=TOKE_INTLIT
			If str="." _tokeType=TOKE_FLOATLIT
			
			' Loop through to the first non digit character
			While IsDigit( TCHR() )
				_tokePos+=1
			Wend
			
			' The token type is an INTLIT, then test to see if the character at the end is a peroid and the one after is another digit.
			' If they are, then set the token type to a FLOATLIT and loop the next characters until another non digit character is encountered. 
			If _tokeType=TOKE_INTLIT And TSTR()="." And IsDigit( TCHR(1) )
				_tokeType=TOKE_FLOATLIT
				_tokePos+=2
				While IsDigit( TCHR() )
					_tokePos+=1
				Wend
			Endif
			
			' If the end character is the exponent of a number, then set the token type to FLOATLIT process any exponent symbols before looping to the end. 
			If TSTR().ToLower()="e"
			
				_tokeType=TOKE_FLOATLIT
				_tokePos+=1
				
				If TSTR()="+" Or TSTR()="-" _tokePos+=1
				
				While IsDigit( TCHR() )
					_tokePos+=1
				Wend
				
			Endif
		
		' If the next character is the binary digit character, then set the token type to INTLIT and loop through until a non binary digit is encountered.	
		Else If str="%" And IsBinDigit( TCHR() )
		
			_tokeType=TOKE_INTLIT
			_tokePos+=1
			
			While IsBinDigit( TCHR() )
				_tokePos+=1
			Wend
		
		' If the next character is the hexadecimal digit character, then set the token type to INTLIT and loop through until a non hexadecimal digit is encountered.	
		Else If str="$" And IsHexDigit( TCHR() )
		
			_tokeType=TOKE_INTLIT
			_tokePos+=1
			
			While IsHexDigit( TCHR() )
				_tokePos+=1
			Wend
		
		' If the next character is the quotation character, then set the token type to STRINGLIT and loop through until the closing quote or newline character is encountered.
		' If the remarks flag is set, then the token type should be set to LINECOMMENT
		Else If str="~q"
		
			_tokeType=TOKE_STRINGLIT
			
			' Loop through until either a closing quote is encountered. Or if the comments flag is set in the token flags,
			' then look for a newline escape sequence and the set token type to TOKE_LINECOMMENT.
			While _tokePos<_length
			
				If Remarks()
					_tokeType=TOKE_LINECOMMENT
					
					If TSTR="~n"
						_line+=1
						Exit
					Endif
					
				Else
				
					If TSTR="~q" Exit
				Endif
				
				_tokePos+=1
			Wend
			
			If _tokePos<_length
				_tokePos+=1
			Else
				If Not Remarks() _tokeType=TOKE_STRINGLITEX
			Endif
		
		' If the next character is the grave accent character, then set the token type to STRINGLIT and loop through until the closing quote or newline character is encountered.
		' If the remarks flag is set, then the token type should be set to LINECOMMENT
		Else If str="`"
			
			_tokeType=TOKE_INTLIT
			
			' Loop through until either a closing grave accent is encountered. Or if the comments flag is set in the token flags,
			' then look for a newline escape sequence and the set token type to TOKE_LINECOMMENT.
			While _tokePos<_length

				If Remarks()
					_tokeType=TOKE_LINECOMMENT
					If TSTR="~n"
						_line+=1
						Exit
					Endif
				Else
					If TSTR="`" Exit
				Endif
				_tokePos+=1
			Wend
            
			If _tokePos<_length
				_tokePos+=1
			Else
				If Not Remarks() _tokeType=TOKE_INTLITEX
			Endif
		
		' If the character is on opening square bracket, then set the token type to SYMBOL and loop through the next set of characters until the closing square bracket.
		Else If str="["
		
			_tokeType=TOKE_SYMBOL
			
			Local i
			
			While _tokePos+i<_length
			
				If TSTR(i)="]"
					_tokePos+=i+1
					Exit
				Endif
				
				If TSTR(i)="~n" Or Not IsSpace( TCHR(i) ) Exit
				
				i+=1
			Wend
		
					
		' Treat anything left as a token type of SYMBOL
		Else

			_tokeType=TOKE_SYMBOL
			If _symbols.Contains( _source[_tokePos-1.._tokePos+1] ) _tokePos+=1
		Endif
		
		' If no token was process in the nested conditional above, then set the token to whatever was left.
		' The token type should not have been set, so it will be a zero value, meaning that it will be a token type of EOF.
		If Not _toke _toke=_source[start.._tokePos]
		
		Return _toke
	End
	
	' Return the actual token string
	Method Toke$()
		Return _toke
	End
	
	' Return the token type
	Method TokeType()
		Return _tokeType
	End
	
	' Iterate over any whitespace character
	Method SkipSpace()
		While _tokeType=TOKE_SPACE
			NextToke
		Wend
	End
	
	' Exposed external functions to set the various flags.	
	' Use these to set and unset the remark block flag.
	Function RemarksOn()
		_tokenFlags|=REMARK_BLOCK
	End
	
	Function RemarksOff()
		_tokenFlags&= ~REMARK_BLOCK
	End
	
	' Check to see the status of the REMARK BLOCK FLAG.
	Function Remarks:Bool()
		Return Bool(_tokenFlags & REMARK_BLOCK)
	End
	
Private

	' Returns the character code at the current token position with offset if required.
	Method TCHR( i=0 )
		i+=_tokePos
		If i<_length Return _source[i]
	End
	
	' Returns the character string at the current token position with offset if required.
	Method TSTR$( i=0 )
		i+=_tokePos
		If i<_length Return _source[i..i+1]
	End
	
End
