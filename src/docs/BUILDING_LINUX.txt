BUILDING INSTRUCTIONS FOR LINUX

PLEASE NOTE:
Before you begin. You should check out one of the desktop sub forums for any issues and workarounds, or to ask questions.
https://www.cerberus-x.com/community/categories/desktop-targets.70/

REQUIREMENTS
NOTE: Some distributions that are based off those listed below sometimes have their own package naming system.
The basic requirements are to install the development packages for Qt 5/6, xrandr, xinerama, openal, mesa, xxf86vm, xcursor and a GCC C++ compiler.
NOTE: On some distributions, the naming of the Qt makefile generator qmake may be different. It is recommended the users hidden .bashrc/.profile be edited to include a path
to a dedicated bin directory where a link can be added to the relevant qmake.
e.g.
mkdir -p $HOME/bin
ln -s /usr/bin/qmake-qt5 $HOME/bin/qmake
echo 'export PATH=$HOME/bin:$PATH' >> $HOME/.bashrc
source $HOME/.bashrc

UBUNTU BASED DISTRIBUTIONS
sudo apt-get install g++ build-essential libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libopenal-dev libglu1-mesa-dev libxxf86vm-dev
sudo apt-get install qtwebengine5-dev

OpenSUSE BASED DISTRIBUTIONS
sudo zypper in gcc-c++ Mesa-libGL-devel openal-soft-devel libXcursor-devel libXrandr-devel libXinerama-devel libXi-devel libXxf86vm-devel make
sudo zypper in libqt5-qtwebengine-devel

FEDORA DISTRIBUTIONS
sudo dnf install gcc-c++ mesa-libGLU-devel libXi-devel libXcursor-devel libXrandr-devel libXinerama-devel openal-soft-devel
sudo dnf install qt5-qtbase-devel qt5-qtwebengine-devel

RASPBERRY PI 3
Open Terminal window:
sudo raspi-config

Navigate to:
7 - Advanced options >> A7 - GL Driver >> G1 - GL (Full KMS) OpenGL desktop driver with full KMS

sudo apt-get -y install g++ libglu1-mesa-dev libopenal-dev libxi-dev libxrandr-dev libxinerama-dev libxcursor-dev libxxf86vm-dev libx11-dev libgl1-mesa-dev
sudo apt-get -y install libqt5webkit5-dev libqt5sensors5-dev qtlocation5-dev libxslt1-dev libsqlite3-dev libgstreamer-plugins-base0.10-dev qt5-default libicu-dev

NOTES ON USING THE OFFICIAL QT ONLINE/OFFLINE INSTALLER FROM https://www.qt.io/download
It is possible to build against the Qt SDK kits downloaded from the Qt Installer application, but there is a possibility that some issues may occur when it comes to deploying the IDE Ted.
In general, it's best to use the Linux distribution's own development repositories. The exception to this is if the end user has the required Qt run-times installed, then there should not be any
problems providing that the distributions vendor has built the run-times correctly.

BUILDING
There is a build script supplied in the Cerberus source directory called builder.sh.
This script has two modes of operation. when run without options; the default is to build all tools providing that the requirement above are met. The second mode is used to display a menu
where all the tools can be built individually. Selection between modes is determined by the --showmenu/-m option listed further down in these instructions.

Before the builder.sh script can be run. It requires that it's file permissions be set to execute.
Open a command line console, navigate to the Cerberus source directory (where this text file is) and type:
chmod +x builder.sh

To build Cerberus X, or one of the base tools, open a command line console, navigate to the Cerberus source directory (where this text file is) and type:
./builder.sh

Please note that the transcc tool needs to be built first for any of the main Cerberus X tools.

To build the IDE requires that there are Qt development files are available and installed correctly.
If not, then the menu entry for building the IDE Ted will not be shown and building all tools will exclude the building of the IDE Ted.
If there is an official Qt installer, then you can pass arguments to select it's root directory and a specific version.

The optional arguments to pass to the builder.sh script for the official Qt Installer are:
-q or --qtsdk with the full path to the Qt Installers directory.
-v or --qtver with the dot version number for a specific Qt SDK.
-m or --showmenu will run the script in menu mode.
-d or --deploy with the full path to where Cerberus will be built and an archive created. NOTE: This requires that git is installed and is only available in menu mode.
-a or --archiver with the archiver to use. NOTE: This currently only supports tar.
-g or --gcc to set the version of GCC to use for the build. If the version specified is not found, then the default it to use the system default.
-h or --help to shows help info.

NOTE: The option below is special. It will allow icons to be generate from two svg files.
-i or -icon { default | PATH_TO_APP_SVG PATH_TO_MIME_SVG }
The default option expects that there is a directory in src/builders/bash/images called svg that contains two files named AppIcon.svg and Logo.svg.
The alternative is use the full or relative paths to other svg files.

Executing the builder.sh script with just the Qt installers directory passed as a parameter. It will try to get the highest installed version.
If the Qt SDK cannot be detected with the version parameters passed with both a Qt Install directory and a version, then the script try to use the distributions default Qt SDK development files.
Running the builder.sh script without any parameters will just try to detect a distributions default Qt development install.

IMPORTANT NOTE:
The GCC compiler that comes with later versions of Linux is setup to produce Position-Independent Executables, also known as PIE.
The file browser/manager in most distributions currently will not launch these files directly and may never will, and launching a file via the file manager may be removed entirely in future releases.

To run Cerberus you will have to open a bash shell and change directory to the Cerberus root directory and type:
./Cerberus

For a much easier solution, see IMPORTANT NOTE at
https://www.cerberus-x.com/community/threads/install-requirements-for-linux-includes-raspbery-pi.741/#post-5728

NOTE: Within the builders/bash directory is a bash script called freedesktop.sh
It can be use as a standalone script to create icons from svg images and install a .desktop menu, mime associations and icons.
Use freedesktop.sh -h for options.
