
Import transcc
Import reflection.reflector

Import "native/stb_image.cpp"
Import "native/stb_image.h"
Import "native/stb_image_write.h"
Import "native/stb_image_resize.h"
Import "native/image.cpp"



Class Builder

	Method New( tcc:TransCC )
		Self.tcc=tcc
	End
	
	Method IsValid:Bool() Abstract
	
	Method Begin:Void() Abstract
	
	Method MakeTarget:Void() Abstract
	
	Method Make:Void()
	
		Select tcc.opt_config
		Case "","debug"
			tcc.opt_config="debug"
			casedConfig="Debug"
		Case "release" 
			casedConfig="Release"
		Default
			Die "Invalid config"
		End
	
		If FileType( tcc.opt_srcpath )<>FILETYPE_FILE Die "Invalid source file"
		tcc.opt_srcpath=RealPath( tcc.opt_srcpath )

		If Not tcc.opt_modpath tcc.opt_modpath=tcc.cerberusdir+"/modules"

		'tcc.opt_modpath=".;"+ExtractDir( tcc.opt_srcpath )+";"+tcc.opt_modpath+";"+tcc.cerberusdir+"/targets/"+tcc.target.dir+"/modules"
		tcc.opt_modpath=".;"+ExtractDir( tcc.opt_srcpath )+";"+tcc.opt_modpath+";"+tcc.target.path+"/modules"
		
		If Not tcc.opt_check
			tcc.opt_check=True
			tcc.opt_update=True
			tcc.opt_build=True
		Endif
		
		ENV_HOST=HostOS
		ENV_CONFIG=tcc.opt_config
		ENV_SAFEMODE=tcc.opt_safe
		ENV_MODPATH=tcc.opt_modpath
		ENV_TARGET=tcc.target.system
		ENV_LANG=tcc.target.lang
		ENV_CUSTOMBUILDSCRIPT=tcc.target.buildscript
			
		Self.Begin

		'***** TRANSLATE *****
		If Not tcc.opt_check Return

		Print "Parsing..."
		
		SetConfigVar "HOST",ENV_HOST
		SetConfigVar "LANG",ENV_LANG
		SetConfigVar "TARGET",ENV_TARGET
		SetConfigVar "CONFIG",ENV_CONFIG
		SetConfigVar "SAFEMODE",ENV_SAFEMODE
		'SetConfigVar "CUSTOMBUILDSCRIPT",ENV_CUSTOMBUILDSCRIPT
		
		app=ParseApp( tcc.opt_srcpath )

		Print "Semanting..."
		If GetConfigVar("REFLECTION_FILTER")
			Local r:=New Reflector
			r.Semant app
		Else
			app.Semant
		Endif
		
		Print "Translating..."
		Local transbuf:=New StringStack
		For Local file$=Eachin app.fileImports

			If ExtractExt( file ).ToLower()=ENV_LANG
				transbuf.Push LoadString( file )
				transbuf.Push "~n"
			Endif
			If ENV_LANG="cpp" And ( ExtractExt( file ).ToLower()="h" Or ExtractExt( file ).ToLower()="c" )
				transbuf.Push LoadString( file )
				transbuf.Push "~n"
			Endif
		Next
		transbuf.Push _trans.TransApp( app )
		
		'***** UPDATE *****
		If Not tcc.opt_update Return
		
		Print "Building..."

		transCode=transbuf.Join()
		
		Local buildPath:String
		
		If tcc.opt_builddir
			buildPath=ExtractDir( tcc.opt_srcpath )+"/"+tcc.opt_builddir
		Else
			buildPath=StripExt( tcc.opt_srcpath )+".build"+tcc.GetReleaseVersion()
		Endif
		
		Local targetPath:=buildPath+"/"+tcc.target.dir	'ENV_TARGET
		
		If tcc.opt_clean
			DeleteDir targetPath,True
			If FileType( targetPath )<>FILETYPE_NONE Die "Failed to clean target dir"
		Endif

'Print "targetPath= "+targetPath
'Print "targetdir= "+tcc.cerberusdir+"/targets/"+tcc.target.dir+"/template"
'Print "targetpath= "+tcc.target.path
		If FileType( targetPath )=FILETYPE_NONE
			If FileType( buildPath )=FILETYPE_NONE CreateDir buildPath
			If FileType( buildPath )<>FILETYPE_DIR Die "Failed to create build dir: "+buildPath
			'If Not CopyDir( tcc.cerberusdir+"/targets/"+tcc.target.dir+"/template",targetPath,True,False ) Die "Failed to copy target dir"
			If Not CopyDir( tcc.target.path+"/template",targetPath,True,False ) Die "Failed to copy target dir"
		Endif
		
		If FileType( targetPath )<>FILETYPE_DIR Die "Failed to create target dir: "+targetPath
		
		Local cfgPath:=targetPath+"/config.cxs"
		If FileType( cfgPath )=FILETYPE_FILE PreProcess cfgPath
		
		TEXT_FILES=GetConfigVar( "TEXT_FILES" )
		IMAGE_FILES=GetConfigVar( "IMAGE_FILES" )
		SOUND_FILES=GetConfigVar( "SOUND_FILES" )
		MUSIC_FILES=GetConfigVar( "MUSIC_FILES" )
		BINARY_FILES=GetConfigVar( "BINARY_FILES" )
		
		DATA_FILES=TEXT_FILES
		If IMAGE_FILES DATA_FILES+="|"+IMAGE_FILES
		If SOUND_FILES DATA_FILES+="|"+SOUND_FILES
		If MUSIC_FILES DATA_FILES+="|"+MUSIC_FILES
		If BINARY_FILES DATA_FILES+="|"+BINARY_FILES
		DATA_FILES=DATA_FILES.Replace( ";","|" )
	
		syncData=GetConfigVar( "FAST_SYNC_PROJECT_DATA" )="1"
		
		Local cd:=CurrentDir

		ChangeDir targetPath
		Self.MakeTarget
		ChangeDir cd

	End
	
	Field tcc:TransCC
	Field app:AppDecl
	Field transCode:String
	Field casedConfig:String
	Field dataFiles:=New StringMap<String>	'maps real src path to virtual target path
	Field syncData:Bool
	Field DATA_FILES$
	Field TEXT_FILES$
	Field IMAGE_FILES$
	Field SOUND_FILES$
	Field MUSIC_FILES$
	Field BINARY_FILES$
	
	Method Execute:Bool( cmd:String,failHard:Bool=True )
		Return tcc.Execute( cmd,failHard )
	End
	
	Method CCopyFile:Void( src:String,dst:String )
		If FileTime( src )>FileTime( dst ) Or FileSize( src )<>FileSize( dst )
			DeleteFile dst
			CopyFile src,dst
		Endif
	End

	Method MakeIcons:Void(srcFilename:String,icons:String[],round:Int=False)
		Local iconPath:=ExtractDir(StripExt( tcc.opt_srcpath ))
		Local iconFile:String = RealPath(iconPath+"\"+srcFilename)
		
		If Not FileType( iconFile )=FILETYPE_FILE Then iconFile = RealPath(srcFilename)
				
		If FileType( iconFile )=FILETYPE_FILE
'			If FileSize(iconFile) = FileSize(CurrentDir()+"\icon.cache") Then Return
			
			For Local i:Int = 0 Until icons.Length() Step 3
'				Print "building "+CurrentDir()+"/"+icons[i]
				_CreateIcon(iconFile,CurrentDir()+"/"+icons[i],Int(icons[i+1]),Int(icons[i+2]),round)
			Next
			
			' cache icon file
'			CopyFile (iconFile,CurrentDir()+"\icon.cache")
		Endif
	End
	
	Method CopyIcon:Void(iFile:String,targetIcon:String)		
		If HostOS() = "winnt"
			Local iconPath:=ExtractDir(StripExt( tcc.opt_srcpath ))
			local iconFile:String = RealPath(iconPath+"\"+iFile)
			If FileType( iconFile )=FILETYPE_FILE
				'Print "Icon1== "+iconFile
				If ExtractExt( iconFile).ToLower() = "ico"
					CopyFile (iconFile,targetIcon)
				Else
					_ConvertToIco (iconFile,targetIcon)
				End
			Else
				iconFile = iFile
				If FileType( iconFile )=FILETYPE_FILE
					'Print "Icon2== "+iconFile
					If ExtractExt( iconFile).ToLower() = "ico"
						CopyFile (iconFile,targetIcon)
					Else
						_ConvertToIco (iconFile,targetIcon)
					End
				Endif
			Endif
		Endif
	End

	Method CreateDataDir:Void( dir:String )
	
		dir=RealPath( dir )
	
		If Not syncData DeleteDir dir,True
		CreateDir dir
		
		If FileType( dir )<>FILETYPE_DIR Die "Failed to create target project data dir: "+dir
		
		Local dataPath:=StripExt( tcc.opt_srcpath )+".data"
		If FileType( dataPath )<>FILETYPE_DIR dataPath=""
		
		'all used data...
		Local udata:=New StringSet
		
		'Copy data from cerberus project to target project
		If dataPath
		
			Local srcs:=New StringStack
			srcs.Push dataPath
			
			While Not srcs.IsEmpty()
			
				Local src:=srcs.Pop()
				
				For Local f:=Eachin LoadDir( src )
					If f.StartsWith( "." ) Continue

					Local p:=src+"/"+f
					Local r:=p[dataPath.Length+1..]
					Local t:=dir+"/"+r
					
					Select FileType( p )
					Case FILETYPE_FILE
						If MatchPath( r.ToLower(),DATA_FILES.ToLower() )
							CCopyFile p,t
							udata.Insert t
							dataFiles.Set p,r
						Endif
					Case FILETYPE_DIR
						CreateDir t
						srcs.Push p
					End
				Next
			
			Wend
		
		Endif
		
		'Copy dodgy module data imports...
		For Local p:=Eachin app.fileImports
			Local r:=StripDir( p )
			Local t:=dir+"/"+r
			If MatchPath( r.ToLower(),DATA_FILES.ToLower() )
				CCopyFile p,t
				udata.Insert t
				dataFiles.Set p,r
			Endif
		Next
		
		'Clean up...delete data in target project not in cerberus project.
		If dataPath
		
			Local dsts:=New StringStack
			dsts.Push dir
			
			While Not dsts.IsEmpty()
				
				Local dst:=dsts.Pop()
				
				For Local f:=Eachin LoadDir( dst )
					If f.StartsWith( "." ) Continue
	
					Local p:=dst+"/"+f
					Local r:=p[dir.Length+1..]
					Local t:=dataPath+"/"+r
					
					Select FileType( p )
					Case FILETYPE_FILE
						If Not udata.Contains( p )
							DeleteFile p
						Endif
					Case FILETYPE_DIR
						If FileType( t )=FILETYPE_DIR
							dsts.Push p
						Else
							DeleteDir p,True
						Endif
					End
				Next
				
			Wend
		End
		
	End
	
	Method CopySourceFiles:Void( dir:String )
		dir=RealPath( dir )	
		'Local srcDir:= ExtractDir(tcc.opt_srcpath)
				
		For Local p:=Eachin app.fileIncludes
			Local oSub:Bool = False
			Local oExt:String = "*"
			Local oOut:String = ""
			Local src:String = ""

			Local p2:= p.Split(" ")
			
			For Local p3 := Eachin p2
				Select p3[..4]
					Case "-sub"
						oSub=True
					Case "-ext"
						oExt = p3[5..]
					Case "-out"
						oOut = p3[5..]
						If (oOut[..1]="\" Or oOut[..1]="/") oOut = oOut[1..]
						Local ol:= oOut.Length()
						If (oOut[ol-1..]="\" Or oOut[ol-1..]="/") oOut = oOut[..ol-1]
					Default
						src = p3
				End
			Next
			
			Local targetDir:= dir
			If oOut.Length() > 0
				' Create sub directories
				targetDir += "/"+oOut
				Local outs:= oOut.Split("/")
				oOut = ""
				For Local out := Eachin outs
					oOut += "/"+out
					If (FileType(dir+oOut) <> FILETYPE_DIR) 	CreateDir(dir+oOut)
				Next
			Endif
			
			Local exts := oExt.Split(";")

			If FileType(src)=FILETYPE_FILE
				Local filename:=StripDir( src )
				CCopyFile src,targetDir+"/"+filename
			Else
				Local exts:=oExt.Split(";")
				Local files:= LoadDir(src, oSub, False)
				For Local file:= Eachin files
				
					Local subDir:= ExtractDir(file)
					If (FileType(targetDir+"/"+subDir) <> FILETYPE_DIR And subDir.Length() > 0)
						Local subDirs:= subDir.Split("/")
						oOut = ""
						For Local sub := Eachin subDirs
							oOut += "/"+sub
							If (FileType(targetDir+oOut) <> FILETYPE_DIR) 	CreateDir(targetDir+oOut)
						Next

					Endif
					If FileType(src+"/"+file)=FILETYPE_FILE
						For Local ext := Eachin exts
							If ext = ExtractExt(file) Or ext = "*" 
								CCopyFile src+"/"+file,targetDir+"/"+file
							Endif
						Next
					Endif
				Next
			Endif
		Next
	End
	
End

Global _html5_Info_Width:Int
Global _html5_Info_Height:Int


Function GetInfo_PNG:Int( path:String )
	Local f:=FileStream.Open( path,"r" )
	If f
		Local data:=New DataBuffer( 32 )
		Local n:=f.Read( data,0,24 )
		f.Close
		If n=24 And data.PeekByte(1)="P"[0] And data.PeekByte(2)="N"[0] And data.PeekByte(3)="G"[0]
			_html5_Info_Width=(data.PeekByte(16)&255) Shl 24 | (data.PeekByte(17)&255) Shl 16 | (data.PeekByte(18)&255) Shl 8 | (data.PeekByte(19)&255)
			_html5_Info_Height=(data.PeekByte(20)&255) Shl 24 | (data.PeekByte(21)&255) Shl 16 | (data.PeekByte(22)&255) Shl 8 | (data.PeekByte(23)&255)
			Return 0
		Endif
	Endif
	Return -1
End

Function GetInfo_GIF:Int( path:String )
	Local f:=FileStream.Open( path,"r" )
	If f
		Local data:=New DataBuffer( 32 )
		Local n:=f.Read( data,0,10 )
		f.Close
		If n=10 And data.PeekByte(0)="G"[0] And data.PeekByte(1)="I"[0] And data.PeekByte(2)="F"[0]
			_html5_Info_Width=(data.PeekByte(7)&255) Shl 8 | (data.PeekByte(6)&255)
			_html5_Info_Height=(data.PeekByte(9)&255) Shl 8 | (data.PeekByte(8)&255)
			Return 0
		Endif
	Endif
	Return -1
End

Function GetInfo_JPG:Int( path:String )
	Local f:=FileStream.Open( path,"r" )
	If f
		Local buf:=New DataBuffer( 32 )
		
		If f.Read( buf,0,2 )=2 And (buf.PeekByte(0)&255)=$ff And (buf.PeekByte(1)&255)=$d8
			Repeat

				While f.Read( buf,0,1 )=1  And (buf.PeekByte(0)&255)<>$ff
				Wend
				If f.Eof() Exit
				
				While f.Read( buf,0,1 )=1  And (buf.PeekByte(0)&255)=$ff
				Wend
				If f.Eof() Exit

				Local marker:=buf.PeekByte(0)&255
				Select marker
				Case $d0,$d1,$d2,$d3,$d4,$d5,$d6,$d7,$d8,$d9,$00,$ff
					Continue
				End

				If f.Read( buf,0,2 )<>2 Exit
				Local datalen:=((buf.PeekByte(0)&255) Shl 8 | (buf.PeekByte(1)&255))-2
				
				Select marker
				Case $c0,$c1,$c2,$c3
					If datalen And f.Read( buf,0,5 )=5
						Local bpp:=buf.PeekByte(0)&255
						_html5_Info_Width=(buf.PeekByte(3)&255) Shl 8 | (buf.PeekByte(4)&255)
						_html5_Info_Height=(buf.PeekByte(1)&255) Shl 8 | (buf.PeekByte(2)&255)
						f.Close
						Return 0
					Endif
				End
				
				Local pos:=f.Position+datalen
				If f.Seek( pos )<>pos Exit
				
			Forever
		Endif
		f.Close
	Endif
	Return -1

End

Extern
Function _CreateIcon:Void(srcFile:String,destFile:String,w:Int,h:Int,round:Int)
Function _ConvertToIco:Void(srcFile:String,destFile:String)

