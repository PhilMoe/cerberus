' To build the agk2 module and its documentation automatically, just build and run
' this file as a GLFW Desktop Game

#If TARGET<>"glfw"
#Error "Invalid target. Please select Desktop Game (Glfw3)!"
#Endif

#If HOST = "linux"
#Error "Invalid platform! Currently not available in Linux!"
#Endif

'#GLFW_USE_MINGW = False
#TEXT_FILES+="*.html|*.htm"
Strict

Import brl.filestream
Import brl.requesters
Import os

#GLFW_APP_LABEL="AGKBuildTarget V1.04"
#GLFW_APP_PUBLISHER="Michael Hartlef"

Global _i:Int
Global _j:Int
Global _i2:Int
Global _j2:Int
Global outs:String
Global outcpp:String
Global outdocs:String

Global helppath:String ="/Tier 1/Help/keywordlinks.txt"		
Global apipath:String ="/Tier 1/Editor/data/tags/main.agc.tags"		

Global helpmap:StringMap<String>
Global apiMap:StringMap<String>

'---------------------------------------------------
Function Convert:String(cmd:String)
	Local ret:String = cmd
	Select cmd
		Case "Integer"
			ret = "Int"
		Case ""
			ret = "Void"
		Default
			ret = cmd
	End
	Return ret
End
'---------------------------------------------------
Function Convert2:String(cmd:String)
	Local ret:String = cmd
	Select cmd
		Case "Integer"
			ret = "int"
		Case "Float"
			ret = "float"
		Case ""
			ret = "void"
		Case "String"
			ret = "String"
		Default
			ret = cmd
	End
	Return ret
End

'---------------------------------------------------
Function Main:Int()
	Local oldAPI:String
	Local variant:Int = 0
	Local agk_path:String
	Local agk_EXE:String
	Local helpMap2:StringMap<String> = New StringMap<String>
	Local helpTopic:StringMap<String> = New StringMap<String>
	Local transMap:StringMap<String> = New StringMap<String>
	Local cerberusPath:String
	Local cerberusEXE:String


	' Select the cerberus directory
	If HostOS() = "winnt" 
		cerberusPath = "C:\"
		cerberusEXE = "\Cerberus.exe"
	Else
		cerberusPath = "/Applications/Cerberus"
		cerberusEXE = "/Cerberus.app"
	Endif 
	
	If HostOS() = "macos"
		Notify ("AGKBuildTarget", "Please select the Cerberus X directory!", False)
	Endif 
	cerberusPath = RequestDir("Please select the Cerberus X directory",cerberusPath)
	
'Print (cerberusPath+cerberusEXE)	

	If FileType(cerberusPath+cerberusEXE) = FILETYPE_NONE
		Notify ("Error", "Cerberus directory was not selected!", True)
		ExitApp(0)
	Endif


	' Select the AGK directory
	If HostOS() = "winnt" 
		agk_path = "C:/Program Files (x86)/The Game Creators/AGK2"
		agk_EXE = "/Tier 1/Compiler/AGKBroadcaster.exe"
	Else
		agk_path = "/Applications/AGKMac"
		agk_EXE = "/AppGameKit.app"
	Endif 



	If HostOS() = "macos"
		Notify ("AGKBuildTarget", "Please select the AGK directory!", False)
	Endif 
	agk_path = RequestDir("Please select the AGK directory",agk_path)
	
'Print (agk_path+agk_EXE)

	If FileType(agk_path+agk_EXE) = FILETYPE_NONE
		Notify ("Error", "AGK Directory was not selected!", True)
		ExitApp(0)
	Endif
	
	' keywords.txt Datei finden
	If HostOS() = "macos"
		helppath ="/AppGameKit.app/Contents/Resources/share/Help/keywordlinks.txt"
	Endif		

	If FileType(agk_path+helppath) = FILETYPE_NONE
		Notify ("Error", "AGK keywords.txt was not found!", True)
		ExitApp(0)
	Endif
	
	' main.agc.tags finden
	If HostOS() = "macos"
		apipath ="/AppGameKit.app/Contents/Resources/share/Geany/tags/main.agc.tags"	
	Endif		
	
'Print(agk_path+apipath)

	If FileType(agk_path+apipath) = FILETYPE_NONE
		Notify ("Error", "AGK main.agc.tags was not found!", True)
		ExitApp(0)
	Endif

	

	
	Local helpfile := FileStream.Open(agk_path+helppath, "r")
	If helpfile <> Null
		Local helplinks := helpfile.ReadString()
		helpfile.Close()
		Local helplines := helplinks.Split("~n")
		helpmap = New StringMap<String>
		For Local hi:= 1 To helplines.Length()
			Local helpparts:= helplines[hi-1].Split("|")
			If helpparts.Length()>1
				helpmap.Add(helpparts[0], helpparts[1])
			Endif
		Next

		Local file := FileStream.Open(agk_path+apipath,"r")
		Local apilines := file.ReadString()
		file.Close()

		Local lines:=apilines.Split("~n")
		For _i = 1 To lines.Length()
			If lines[_i-1].Length()<3 Then Continue
			Local parts:=lines[_i-1].Split("|")
	
			Local fTrans:String = "~tFunction "
			outdocs	+= "# Function "	
			' Function name
			fTrans += parts[0]
			outdocs	+= parts[0]	
			
			' return param
			If parts[1].Length()>0 
				fTrans = fTrans + ":"
				fTrans += Convert(parts[1])
				outdocs	+= ":"+Convert(parts[1])	
			Else	
				fTrans = fTrans + ":Void"
				outdocs	+= ":Void"	
			Endif
			
			'parameters
			fTrans += "("
			outdocs	+= "("			
			If parts[2].Length()>3
				parts[2] = parts[2].Replace("(","")
				parts[2] = parts[2].Replace(")","")
				Local params := parts[2].Split(",")
				For _j = 1 To params.Length()
					Local param := params[_j-1]
					Local singleparam := param.Trim().Split(" ")
					fTrans += "_" + singleparam[1] + ":" +  Convert(singleparam[0])
					outdocs	+= "_" + singleparam[1] + ":" +  Convert(singleparam[0])			
					If _j < params.Length()
						fTrans += ", "
					outdocs	+= ", "
					Endif
				Next
			Endif
			fTrans += ")"
			outdocs	+= ")~n"
			outdocs += "~n"			
			outdocs += "~n"	
			Local helppath2:String
			Local helps:String

			helppath2 = helpmap.Get(parts[0])
			helppath2 = helppath2.Replace("/","\")
			helppath2 = helppath2.Replace("~r","")
			helppath = helppath.Replace("\","/")

			Local ps:String = helppath+helppath2

			Local helpfile2 := FileStream.Open(ExtractDir(agk_path+helppath)+"/"+helppath2.Replace("\","/"), "r")
			If helpfile2 <> Null
				helps = helpfile2.ReadString()
				Local l1:= helps.Find("<h2>Description</h2><p>")+23
				Local l2:= helps.Find("</p><h2>Definition</h2>")
				helps = helps[l1..l2]

				helpfile2.Close()
			Endif
			outdocs += helps + "~n"
			outdocs += "~n"			
			outdocs += "~n"	

'Print StripDir(ExtractDir(helppath2))
			Local currVal:String = helpMap2.Get(StripDir(ExtractDir(helppath2)).Replace("-","_"))
			If currVal.Length()>1 outdocs = currVal + outdocs
			helpMap2.Set(StripDir(ExtractDir(helppath2)).Replace("-","_"), outdocs)
			helpTopic.Set(StripDir(ExtractDir(helppath2)).Replace("-","_"),StripDir(ExtractDir(helppath2)).Replace("-","_"))
			outdocs = ""

			' agk:: call
			If parts[0] = oldAPI
				variant += 1
			Else
				variant = 1
			Endif
			
			If parts[2].Find("String")>-1
				fTrans += " = ~q" + "_agk_" + parts[0]
				If variant > 1 Then fTrans += variant
				fTrans += "~q"

				' building the conversion function	
				outcpp += Convert2(parts[1]) + " " + "_agk_" + parts[0]
				If variant >1 Then outcpp += variant
				outcpp += "("
				If parts[2].Length()>3
					Local paramsC := parts[2].Split(",")
					For _j2 = 1 To paramsC.Length()
						Local paramC := paramsC[_j2-1]
						Local singleparamC := paramC.Trim().Split(" ")
						outcpp += Convert2(singleparamC[0]) + " _" + singleparamC[1]
						If _j2 < paramsC.Length()
							outcpp += ", "
						Endif
					Next
				Endif
				outcpp += ") "
				outcpp += "{ "
				If Convert(parts[1])<>"Void" Then outcpp += "return "
				outcpp += "agk::"+parts[0] + "("
				
				If parts[2].Length()>3
					Local paramsC2 := parts[2].Split(",")
					For Local _j22 := 1 To paramsC2.Length()
						Local paramC2 := paramsC2[_j22-1]
						Local singleparamC2 := paramC2.Trim().Split(" ")
						If singleparamC2[0] = "String" Then outcpp += "C_STR("
						outcpp += "_" + singleparamC2[1]
						If singleparamC2[0] = "String" Then outcpp += ")"
						If _j22 < paramsC2.Length()
							outcpp += ", "
						Endif
					Next
				Endif			
				
				outcpp += ");"
				outcpp += " };"
				outcpp += "~n"
			Else
				fTrans += " = ~q" + "agk::" + parts[0]
				fTrans += "~q"
			Endif
			Local fTrans2:= fTrans + "~n"
			Local currVal2:String = transMap.Get(StripDir(ExtractDir(helppath2)).Replace("-","_"))
			If currVal2.Length()>1 fTrans2 = currVal2 + fTrans2
			transMap.Set(StripDir(ExtractDir(helppath2)).Replace("-","_"), fTrans2)
			
			outs += fTrans + "~n"
			oldAPI = parts[0]
		Next

		Local outs2:String
		outs2 += "#If TARGET<>~qagk~q And TARGET<>~qagk_ios~q~n"
		outs2 += "#Error ~qInvalid target!~q~n"
		outs2 += "#Endif~n"
		outs2 += "Import ~qnative/agk2.cpp~q~n"
		
		For Local hmKey := Eachin helpTopic
			If hmKey.Value().Length > 1 Then outs2 += "Import agk2.agk2_"+hmKey.Value().Replace("-","_")+"~n"
		Next
		
		outs2 += "Import agk2_constants~n"
		outs2 += "~n"
		outs2 += "Class CString Abstract~n"
		outs2 += "End~n"
		outs2 += "~n"
		outs2 += "Extern~n"
		outs2 += "~tFunction agk_Print:Void(_number:Int) = ~qagk::Print~q~n"
		outs2 += "~tFunction agk_Print:Void(_number:Float) = ~qagk::Print~q~n"
		outs2 += "~tFunction agk_Print:Void(_txt:String) = ~q_agk_Print~q~n"
		outs2 += "~tFunction agk_PrintC:Void(_szString:String) = ~q_agk_PrintC~q~n"
		outs2 += "~tFunction agk_PrintC:Void(_i:Int) = ~qagk::PrintC~q~n"
		outs2 += "~tFunction agk_PrintC:Void(_f:Float) = ~qagk::PrintC~q~n"
		outs2 += "~tFunction agk_Mod:Int(_a:Int, _b:Int) = ~qagk::Mod~q~n"
		outs2 += "~n"
		
		'outs = outs.Replace("Function Mod:Int", "'Function Mod:Int")
		'outs = outs.Replace("Function Print:Void", "'Function Print:Void")
		'outs = outs.Replace("Function PrintC:Void", "'Function PrintC:Void")
		
		'outs2 += outs
		'outs2 += "~n"
		outs2 += "Public~n"
		
		If FileType(cerberusPath+"/modules/agk2")=FILETYPE_NONE 
			CreateDir(cerberusPath+"/modules/agk2")
			CreateDir(cerberusPath+"/modules/agk2/native")
			CreateDir(cerberusPath+"/modules/agk2/cerberusdoc")
			'CreateDir(cerberusPath+"/modules/agk2/cerberusdoc/commands")
		Endif
		
		Local files := FileStream.Open(cerberusPath+"/modules/agk2/agk2.cxs","w")
		files.WriteString(outs2)
		files.Close()
		
		Local outc:String
		outc += "// Beginning of the agk2.cpp file~n"
		outc += "~n"
		outc += "static String::CString<char> C_STR( const String &t ){ return t.ToCString<char>(); };~n"
		outc += "~n"
		outcpp = outcpp.Replace("String _agk_String(String _Data)", "//String _agk_String(String _Data)")
		
		outcpp = outc + outcpp	
		outcpp += "~n"
		outcpp += "// End of the agk2.cpp file~n"
		
		Local filec := FileStream.Open(cerberusPath+"/modules/agk2/native/agk2.cpp","w")
		filec.WriteString(outcpp)
		filec.Close()
	
		' create main doc file
		Local sdocs:String ="~n"
		sdocs += "# Module agk2~n"
		sdocs += "~n"
		sdocs += "~n"
		Local helptxt:String
		
		Local fileh := FileStream.Open(cerberusPath+"/targets/appgamekit/tools/agk2_help.txt","r")
		If fileh <> Null
			helptxt = fileh.ReadString()
			filec.Close()
			sdocs += helptxt
			sdocs += "~n"
			sdocs += "~n"
		Else
			Print ("File agk_help.txt not found!!!")
		Endif

		outdocs = sdocs + outdocs
		Local filed := FileStream.Open(cerberusPath+"/modules/agk2/cerberusdoc/agk2.cerberusdoc","w")
		For Local hmKey := Eachin helpTopic
			If hmKey.Value().Length > 1 Then outdocs += "* [[agk2.agk2_"+hmKey.Value().Replace("-","_")+"|"+hmKey.Value()+"]]~n"
			
		Next
		filed.WriteString(outdocs)
		filed.Close()	
		
		' Create sub doc file
		For Local hmKey := Eachin helpTopic
			If hmKey.Value().Length > 1
				Local fileds := FileStream.Open(cerberusPath+"/modules/agk2/cerberusdoc/agk2_"+hmKey.Value().Replace("-","_")+".cerberusdoc","w")
				outdocs = "~n"
				outdocs += "# Module agk2_" + hmKey.Value() + "~n"
				'outdocs += "~n"
				'outdocs += "~n"
				'outdocs += "> " + hmKey.Value()
				outdocs += "~n~n~n"
				outdocs += helpMap2.Get(hmKey.Value().Replace("-","_"))
				fileds.WriteString(outdocs)
				fileds.Close()
			Endif	
		Next	
		
		' Create sub module
		For Local hmKey := Eachin helpTopic
			If hmKey.Value().Length > 1
				Local filedsm := FileStream.Open(cerberusPath+"/modules/agk2/agk2_"+hmKey.Value().Replace("-","_")+".cxs","w")
				outdocs = "~n"
'				outdocs += "Import agk2"
'				outdocs += "~n"
				outdocs += "~n"
				outdocs += "Extern"
				outdocs += "~n"
				outdocs += transMap.Get(hmKey.Value().Replace("-","_"))
				outdocs += "~n"
				outdocs += "Public"
				outdocs += "~n"
				
				outdocs = outdocs.Replace("Function Mod:Int", "'Function Mod:Int")
				outdocs = outdocs.Replace("Function Print:Void", "'Function Print:Void")
				outdocs = outdocs.Replace("Function PrintC:Void", "'Function PrintC:Void")
				
				filedsm.WriteString(outdocs)
				filedsm.Close()
			Endif	
		Next	
		


		' Copy constants module file
		CopyFile(cerberusPath+"/targets/appgamekit/tools/agk2_constants.cxs",cerberusPath+"/modules/agk2/agk2_constants.cxs")
	Endif
	
	If HostOS() = "winnt"
		BuildTemplate(agk_path, cerberusPath)
	Else
		BuildTemplateOSX(agk_path, cerberusPath)
		
	Endif
	Notify( "AGKBuildTarget", "The AppGamekit Target was successfully build!", false )
	Return 0
End

Function BuildTemplate:Void(_path:String, cerberusPath:string)
		'If FileType(RealPath(cerberusPath"/targets/appgamekit/template/AGKTemplate"))=FILETYPE_NONE
'Print RealPath("../../../")		 
			CreateDir((cerberusPath+"/targets/appgamekit/template/AGKTemplate"))
			CreateDir((cerberusPath+"/targets/appgamekit/template/AGKTemplate/apps"))
			CreateDir((cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform"))
			CreateDir((cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform/windows"))
			CreateDir((cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform/windows/Lib"))
		'Endif
		CopyDir(_path+"/Tier 2/bullet",(cerberusPath+"/targets/appgamekit/template/AGKTemplate/bullet"), True)
		CopyDir(_path+"/Tier 2/common",(cerberusPath+"/targets/appgamekit/template/AGKTemplate/common"), True)
		CopyDir(_path+"/Tier 2/platform/windows/Lib/VS2017",(cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform/windows/Lib/VS2017"), True)
		CopyDir(_path+"/Tier 2/platform/windows/Source",(cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform/windows/Source"), True)
		CopyDir(_path+"/Tier 2/apps/template_windows_vs2017_64",(cerberusPath+"/targets/appgamekit/template/AGKTemplate/apps/template_windows_vs2017_64"), True)
		
		' modify the template.h file
		Local templateh:=LoadString(cerberusPath+"/targets/appgamekit/template/AGKTemplate/apps/template_windows_vs2017_64/template.h" )

		Local _starth:=templateh.Find( "#define DEVICE_WIDTH 1024" )
		Local _endh:=templateh.Find( "// used to make a more unique folder for the write path" )
		
		templateh = templateh[0.._starth]+"//${CONFIG_BEGIN}~n//${CONFIG_END}~n~n"+templateh[_endh..templateh.Length()]
		SaveString templateh,( cerberusPath+"/targets/appgamekit/template/AGKTemplate/apps/template_windows_vs2017_64/template.h" )

		' modify the template.cpp file
		Local template:=LoadString(cerberusPath+"/targets/appgamekit/template/AGKTemplate/apps/template_windows_vs2017_64/template.cpp" )

		Local _end:=template.Find( "// Namespace" )
		Local _start:=_end-1
		
		template = template[0.._start-1]+"~n//${TRANSCODE_BEGIN}~n//${TRANSCODE_END}~n~n"+template[_end..template.Length()]

		_start=template.Find( "agk::SetVirtualResolution" )
		_end=template.Find( "int app::Loop" )-5
		
		template = template[0.._start-1]+"~tgc_init1();~n~tbbInit();~n~tgc_init2();~n"+template[_end..template.Length()]

		_start=template.Find( "agk::Print( agk::ScreenFPS(" )
		_end=template.Find( "// return 1 to close app" )
		
		template = template[0.._start-1]+"~treturn bbMain(); "+template[_end..template.Length()]

		SaveString template,( cerberusPath+"/targets/appgamekit/template/AGKTemplate/apps/template_windows_vs2017_64/template.cpp" )
		
End

Function BuildTemplateOSX:Void(_path:String, cerberusPath:String)
	Local tier2Path:String = ""
	
	Notify ("AGKBuildTarget", "Please select the Tier2 project directory", False)

	tier2Path = RequestDir("Please select the Tier2 project directory",_path)
'Print(tier2Path)

	
	CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate")
	CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/apps")
	CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/apps/template_mac")
	'CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/apps/template_mac/English.lproj")
	'CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/apps/template_mac/icons.iconset")
	'CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/apps/template_mac/media")
	CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/bullet")
	CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform")
	CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/common")
	'CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform/apple")
	'CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform/apple/Lib")
	'CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform/apple/Lib/Release")
	'CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform/apple/Lib/ReleaseLite")
	'CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform/apple/Source")
	'CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform/apple/Source/Social Plugins")
	CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform/mac")
	'CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform/mac/DDHidLib")
	'CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform/mac/GLFW")
	'CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform/mac/Lib")
	'CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform/mac/Lib/Release")
	'CreateDir(cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform/mac/Source")

	CopyDir(tier2Path+"/bullet",(cerberusPath+"/targets/appgamekit/template/AGKTemplate/bullet"), True)
	CopyDir(tier2Path+"/common",(cerberusPath+"/targets/appgamekit/template/AGKTemplate/common"), True)
	CopyDir(tier2Path+"/platform/mac",(cerberusPath+"/targets/appgamekit/template/AGKTemplate/platform/mac"), True)
	
	CopyDir(tier2Path+"/apps/template_mac",(cerberusPath+"/targets/appgamekit/template/AGKTemplate/apps/template_mac"), True)
	
	' modify the template.h file
	Local templateh:=LoadString(cerberusPath+"/targets/appgamekit/template/AGKTemplate/apps/template_mac/template.h" )

	Local _starth:=templateh.Find( "#define DEVICE_WIDTH 1024" )
	Local _endh:=templateh.Find( "// used to make a more unique folder for the write path" )
	
	templateh = templateh[0.._starth]+"//${CONFIG_BEGIN}~n//${CONFIG_END}~n~n"+templateh[_endh..templateh.Length()]
	SaveString templateh,( cerberusPath+"/targets/appgamekit/template/AGKTemplate/apps/template_mac/template.h" )

	' modify the template.cpp file
	Local template:=LoadString(cerberusPath+"/targets/appgamekit/template/AGKTemplate/apps/template_mac/template.cpp" )

	Local _end:=template.Find( "// Namespace" )
	Local _start:=_end-1
	
	template = template[0.._start-1]+"~n//${TRANSCODE_BEGIN}~n//${TRANSCODE_END}~n~n"+template[_end..template.Length()]

	_start=template.Find( "agk::SetVirtualResolution" )
	_end=template.Find( "int app::Loop" )-5
	
	template = template[0.._start-1]+"~tgc_init1();~n~tbbInit();~n~tgc_init2();~n"+template[_end..template.Length()]

	_start=template.Find( "agk::Print( agk::ScreenFPS(" )
	_end=template.Find( "// return 1 to close app" )
	
	template = template[0.._start-1]+"~treturn bbMain(); "+template[_end..template.Length()]

	SaveString template,( cerberusPath+"/targets/appgamekit/template/AGKTemplate/apps/template_mac/template.cpp" )
		
	BuildTemplateIOS(tier2Path, cerberusPath)
	
End

Function BuildTemplateIOS:Void(_path:String, cerberusPath:String)
	Local tier2Path:String = ""
	
	'Notify ("AGKBuildTarget", "Please select the Tier2 project directory", False)

	'tier2Path = RequestDir("Please select the Tier2 project directory",_path)
	tier2Path = _path
'Print(tier2Path)

	
	CreateDir(cerberusPath+"/targets/appgamekit_ios/template/AGKTemplate")
	CreateDir(cerberusPath+"/targets/appgamekit_ios/template/AGKTemplate/apps")
	CreateDir(cerberusPath+"/targets/appgamekit_ios/template/AGKTemplate/apps/template_ios")

	CreateDir(cerberusPath+"/targets/appgamekit_ios/template/AGKTemplate/bullet")
	CreateDir(cerberusPath+"/targets/appgamekit_ios/template/AGKTemplate/platform")
	CreateDir(cerberusPath+"/targets/appgamekit_ios/template/AGKTemplate/common")

	CreateDir(cerberusPath+"/targets/appgamekit_ios/template/AGKTemplate/platform/apple")

	CopyDir(tier2Path+"/bullet",(cerberusPath+"/targets/appgamekit_ios/template/AGKTemplate/bullet"), True)
	CopyDir(tier2Path+"/common",(cerberusPath+"/targets/appgamekit_ios/template/AGKTemplate/common"), True)
	CopyDir(tier2Path+"/platform/apple",(cerberusPath+"/targets/appgamekit_ios/template/AGKTemplate/platform/apple"), True)
	
	CopyDir(tier2Path+"/apps/template_ios",(cerberusPath+"/targets/appgamekit_ios/template/AGKTemplate/apps/template_ios"), True)
	
	' modify the template.h file
	Local templateh:=LoadString(cerberusPath+"/targets/appgamekit_ios/template/AGKTemplate/apps/template_ios/Classes/template.h" )

	Local _starth:=templateh.Find( "//#define AGK_LANDSCAPE" )
	Local _endh:=templateh.Find( "// Global values for the app" )
	
	templateh = templateh[0.._starth]+"//${CONFIG_BEGIN}~n//${CONFIG_END}~n~n"+templateh[_endh..templateh.Length()]
	SaveString templateh,( cerberusPath+"/targets/appgamekit_ios/template/AGKTemplate/apps/template_ios/Classes/template.h" )

	' modify the template.cpp file
	Local template:=LoadString(cerberusPath+"/targets/appgamekit_ios/template/AGKTemplate/apps/template_ios/Classes/template.cpp" )

	Local _end:=template.Find( "// Namespace" )
	Local _start:=_end-1
	
	template = template[0.._start-1]+"~n//${TRANSCODE_BEGIN}~n//${TRANSCODE_END}~n~n"+template[_end..template.Length()]

	_start=template.Find( "agk::SetVirtualResolution" )
	_end=template.Find( "int app::Loop" )-5
	
	template = template[0.._start-1]+"~tgc_init1();~n~tbbInit();~n~tgc_init2();~n"+template[_end..template.Length()]

	_start=template.Find( "agk::Print( agk::ScreenFPS(" )
	_end=template.Find( "// can't close app on iOS" )
	
	template = template[0.._start-1]+"~treturn bbMain(); "+template[_end..template.Length()]

	SaveString template,( cerberusPath+"/targets/appgamekit_ios/template/AGKTemplate/apps/template_ios/Classes/template.cpp" )
		
		
End
